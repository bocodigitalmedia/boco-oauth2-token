// Generated by CoffeeScript 1.6.3
(function() {
  var AccessToken, AccessTokenRepository, AccessTokenService, TimeInMs;

  AccessTokenRepository = require('./AccessTokenRepository');

  AccessToken = require('./AccessToken');

  TimeInMs = require('./TimeInMs');

  AccessTokenService = (function() {
    function AccessTokenService(props) {
      if (props == null) {
        props = {};
      }
      this.accessTokenRepository = props.accessTokenRepository;
      this.accessTokenExpiry = props.accessTokenExpiry;
      this.accessTokenType = props.accessTokenType;
      this.setDefaults();
    }

    AccessTokenService.prototype.setDefaults = function() {
      if (this.accessTokenType == null) {
        this.accessTokenType = "bearer";
      }
      if (this.accessTokenExpiry == null) {
        this.accessTokenExpiry = 4 * TimeInMs.hour;
      }
      if (this.refreshTokenExpiry == null) {
        this.refreshTokenExpiry = 2 * TimeInMs.week;
      }
      return this.accessTokenRepository != null ? this.accessTokenRepository : this.accessTokenRepository = new AccessTokenRepository.Memory();
    };

    AccessTokenService.prototype.constructAccessToken = function(props) {
      var token;
      if (props == null) {
        props = {};
      }
      return token = new AccessToken(props);
    };

    AccessTokenService.prototype.generateAccessTokenString = function(bytes, encoding) {
      if (bytes == null) {
        bytes = 32;
      }
      if (encoding == null) {
        encoding = 'base64';
      }
      return require('crypto').randomBytes(bytes).toString(encoding);
    };

    AccessTokenService.prototype.generateRefreshTokenString = function(bytes, encoding) {
      if (bytes == null) {
        bytes = 32;
      }
      if (encoding == null) {
        encoding = 'base64';
      }
      return require('crypto').randomBytes(bytes).toString(encoding);
    };

    AccessTokenService.prototype.grantAccessToken = function(props, callback) {
      var accessToken;
      if (props == null) {
        props = {};
      }
      accessToken = this.constructAccessToken({
        type: this.accessTokenType,
        clientId: props.clientId,
        userId: props.userId,
        expiresIn: this.accessTokenExpiry
      });
      accessToken.value = this.generateAccessTokenString();
      accessToken.refreshToken = this.generateRefreshTokenString();
      return this.accessTokenRepository.store(accessToken, function(error, accessToken) {
        if (error != null) {
          return callback(error);
        }
        return callback(null, accessToken);
      });
    };

    return AccessTokenService;

  })();

  module.exports = AccessTokenService;

}).call(this);

/*
//@ sourceMappingURL=AccessTokenService.map
*/
