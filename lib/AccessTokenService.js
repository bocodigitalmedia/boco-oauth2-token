// Generated by CoffeeScript 1.6.3
(function() {
  var AccessToken, AccessTokenRepository, AccessTokenService, TimeInMs;

  AccessTokenRepository = require('./AccessTokenRepository');

  AccessToken = require('./AccessToken');

  TimeInMs = require('./TimeInMs');

  AccessTokenService = (function() {
    function AccessTokenService(props) {
      if (props == null) {
        props = {};
      }
      this.accessTokenRepository = props.accessTokenRepository;
      this.accessTokenExpiry = props.accessTokenExpiry;
      this.accessTokenType = props.accessTokenType;
      this.setDefaults();
    }

    AccessTokenService.prototype.setDefaults = function() {
      if (this.accessTokenType == null) {
        this.accessTokenType = "bearer";
      }
      if (this.accessTokenExpiry == null) {
        this.accessTokenExpiry = 4 * TimeInMs.hour;
      }
      if (this.refreshTokenExpiry == null) {
        this.refreshTokenExpiry = 2 * TimeInMs.week;
      }
      return this.accessTokenRepository != null ? this.accessTokenRepository : this.accessTokenRepository = new AccessTokenRepository.Memory();
    };

    AccessTokenService.prototype.constructAccessToken = function(props) {
      var token;
      if (props == null) {
        props = {};
      }
      return token = new AccessToken(props);
    };

    AccessTokenService.prototype.generateAccessTokenString = function(bytes, encoding) {
      if (bytes == null) {
        bytes = 32;
      }
      if (encoding == null) {
        encoding = 'base64';
      }
      return require('crypto').randomBytes(bytes).toString(encoding);
    };

    AccessTokenService.prototype.generateRefreshTokenString = function(bytes, encoding) {
      if (bytes == null) {
        bytes = 32;
      }
      if (encoding == null) {
        encoding = 'base64';
      }
      return require('crypto').randomBytes(bytes).toString(encoding);
    };

    AccessTokenService.prototype.grantAccessToken = function(params, callback) {
      var accessToken;
      if (params == null) {
        params = {};
      }
      accessToken = this.constructAccessToken({
        type: this.accessTokenType,
        clientId: params.clientId,
        userId: params.userId,
        expiresIn: this.accessTokenExpiry
      });
      accessToken.value = this.generateAccessTokenString();
      accessToken.refreshToken = this.generateRefreshTokenString();
      return this.accessTokenRepository.store(accessToken, function(error, accessToken) {
        if (error != null) {
          return callback(error);
        }
        return callback(null, accessToken);
      });
    };

    AccessTokenService.prototype.refreshAccessToken = function(params, callback) {
      var accessTokenRepository, clientId, query, refreshToken, service;
      if (params == null) {
        params = {};
      }
      clientId = params.clientId;
      refreshToken = params.refreshToken;
      query = {
        refreshToken: refreshToken
      };
      service = this;
      accessTokenRepository = this.accessTokenRepository;
      return accessTokenRepository.findByRefreshToken(query, function(error, accessToken) {
        var newAccessToken;
        if (error != null) {
          return callback(error);
        }
        if (accessToken == null) {
          return callback(Error("No token found with this refresh token"));
        }
        if (accessToken.clientId !== clientId) {
          return callback(Error("Access token belongs to another client"));
        }
        newAccessToken = service.constructAccessToken({
          type: accessToken.type,
          clientId: accessToken.clientId,
          userId: accessToken.userId,
          expiresIn: accessToken.expiresIn
        });
        newAccessToken.value = service.generateAccessTokenString();
        newAccessToken.refreshToken = service.generateRefreshTokenString();
        return accessTokenRepository.store(newAccessToken, function(error, newAccessToken) {
          if (error != null) {
            return callback(error);
          }
          return callback(null, newAccessToken);
        });
      });
    };

    return AccessTokenService;

  })();

  module.exports = AccessTokenService;

}).call(this);

/*
//@ sourceMappingURL=AccessTokenService.map
*/
